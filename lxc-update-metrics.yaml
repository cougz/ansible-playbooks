---
- name: Deploy New LXC Metrics Architecture with Complete Cleanup
  hosts: debian
  become: yes # Required to write to /opt and restart services
  vars:
    # Define paths for the new architecture
    lxc_metrics_script_path: "/opt/otelcol-contrib/lxc-metrics-exporter-background.sh"
    lxc_webserver_script_path: "/opt/otelcol-contrib/lxc-metrics-exporter.py"
    lxc_old_script_path: "/opt/otelcol-contrib/lxc-metrics-script.sh"
    
    # Define the systemd service names
    lxc_exporter_service_name: "lxc-metrics-exporter.service"
    lxc_old_service_name: "lxc-exporter.service"  # Old service name
    
    # Configuration variables
    metrics_collection_interval: 5  # seconds between metric collections
    bash_sampling_interval: 2       # seconds for internal bash sampling
    
  tasks:
    # === AGGRESSIVE CLEANUP ===
    - name: Stop ALL LXC-related services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
      ignore_errors: yes
      loop:
        - "{{ lxc_old_service_name }}"
        - "{{ lxc_exporter_service_name }}"
        - lxc-exporter
        - lxc-metrics

    - name: Disable ALL LXC-related services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: no
      ignore_errors: yes
      loop:
        - "{{ lxc_old_service_name }}"
        - "{{ lxc_exporter_service_name }}"
        - lxc-exporter
        - lxc-metrics

    - name: Kill any processes using port 9100
      ansible.builtin.shell: |
        # Find and kill processes using port 9100
        for pid in $(ss -tlnp | grep :9100 | grep -o 'pid=[0-9]*' | cut -d= -f2); do
          if [ -n "$pid" ]; then
            echo "Killing process $pid using port 9100"
            kill -9 $pid 2>/dev/null || true
          fi
        done
        
        # Also kill by process name patterns
        pkill -f "lxc.*exporter" || true
        pkill -f "lxc.*metrics" || true
        pkill -f ":9100" || true
      ignore_errors: yes
      register: port_cleanup

    - name: Wait for port 9100 to be freed
      ansible.builtin.wait_for:
        port: 9100
        state: stopped
        timeout: 10
      ignore_errors: yes

    - name: Remove ALL old systemd service files
      ansible.builtin.file:
        path: "/etc/systemd/system/{{ item }}"
        state: absent
      loop:
        - "{{ lxc_old_service_name }}"
        - "{{ lxc_exporter_service_name }}"
        - lxc-exporter.service
        - lxc-metrics.service
      notify: reload systemd

    - name: Remove old Python app file
      ansible.builtin.file:
        path: "/opt/otelcol-contrib/lxc-exporter-app.py"
        state: absent

    - name: Remove old backup files (older than 1 day)
      ansible.builtin.find:
        paths: "/opt/otelcol-contrib"
        patterns: "*.backup.*"
        age: "1d"
      register: old_backups

    - name: Delete old backup files
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_backups.files }}"
      when: old_backups.files is defined

    - name: Clean up Python cache directories
      ansible.builtin.file:
        path: "/opt/otelcol-contrib/__pycache__"
        state: absent

    # === DEPLOY NEW ARCHITECTURE ===
    - name: Copy updated background LXC metrics script
      ansible.builtin.template:
        src: templates/lxc-metrics-exporter-background.sh.j2
        dest: "{{ lxc_metrics_script_path }}"
        owner: otelcol
        group: otelcol
        mode: '0755'
      notify: restart lxc exporter

    - name: Copy new Python web server
      ansible.builtin.template:
        src: templates/lxc-metrics-exporter.py.j2
        dest: "{{ lxc_webserver_script_path }}"
        owner: otelcol
        group: otelcol
        mode: '0755'
      notify: restart lxc exporter

    - name: Backup old script (if it exists)
      ansible.builtin.copy:
        src: "{{ lxc_old_script_path }}"
        dest: "{{ lxc_old_script_path }}.backup.{{ ansible_date_time.epoch }}"
        remote_src: yes
        owner: otelcol
        group: otelcol
        mode: '0644'
      ignore_errors: yes

    - name: Remove old script
      ansible.builtin.file:
        path: "{{ lxc_old_script_path }}"
        state: absent

    - name: Create NEW systemd service file with corrected configuration
      ansible.builtin.copy:
        dest: /etc/systemd/system/{{ lxc_exporter_service_name }}
        owner: root
        group: root
        mode: '0644'
        content: |
          [Unit]
          Description=LXC Metrics Exporter with Background Collection
          Documentation=https://prometheus.io/docs/instrumenting/exporters/
          After=network.target
          Wants=network.target

          [Service]
          Type=simple
          User=otelcol
          Group=otelcol
          ExecStart=/usr/bin/python3 {{ lxc_webserver_script_path }}
          Restart=always
          RestartSec=5
          TimeoutStopSec=20

          # Security settings
          NoNewPrivileges=yes
          ProtectSystem=strict
          ProtectHome=yes
          ReadWritePaths=/var/lib/otelcol-contrib
          ReadOnlyPaths=/sys/fs/cgroup /sys/class/net /proc
          PrivateTmp=yes
          PrivateDevices=yes
          ProtectHostname=yes
          ProtectClock=yes
          ProtectKernelTunables=yes
          ProtectKernelModules=yes
          ProtectKernelLogs=yes
          RestrictRealtime=yes
          RestrictSUIDSGID=yes
          RemoveIPC=yes
          RestrictNamespaces=yes

          # Resource limits
          MemoryMax=256M
          CPUQuota=50%

          # Environment
          Environment=PYTHONUNBUFFERED=1
          Environment=FLASK_DEBUG=false

          # Logging
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier=lxc-metrics-exporter

          [Install]
          WantedBy=multi-user.target
      notify: 
        - reload systemd
        - restart lxc exporter

    - name: Ensure metrics output directory exists with correct permissions
      ansible.builtin.file:
        path: /var/lib/otelcol-contrib
        state: directory
        owner: otelcol
        group: otelcol
        mode: '0755'

    - name: Ensure Python Flask dependencies are installed
      ansible.builtin.package:
        name: 
          - python3-flask
          - python3-pip
        state: present

    - name: Test that the background script is executable and valid
      ansible.builtin.command:
        cmd: "{{ lxc_metrics_script_path }} --help"
      register: script_test
      failed_when: script_test.rc > 1
      ignore_errors: yes
      changed_when: false

    - name: Test that the Python script is valid
      ansible.builtin.command:
        cmd: python3 -m py_compile {{ lxc_webserver_script_path }}
      register: python_test
      failed_when: python_test.rc != 0
      changed_when: false

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable and start LXC exporter service
      ansible.builtin.systemd:
        name: "{{ lxc_exporter_service_name }}"
        enabled: yes
        state: started
        daemon_reload: yes

  handlers:
    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: restart lxc exporter
      ansible.builtin.systemd:
        name: "{{ lxc_exporter_service_name }}"
        state: restarted
        enabled: yes

  post_tasks:
    - name: Wait for service to be ready
      ansible.builtin.wait_for:
        port: 9100
        host: "{{ ansible_default_ipv4.address }}"
        delay: 5
        timeout: 30

    - name: Test metrics endpoint
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:9100/metrics"
        method: GET
        timeout: 10
      register: metrics_test

    - name: Test health endpoint  
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:9100/health"
        method: GET
        timeout: 10
      register: health_test

    - name: Check service status
      ansible.builtin.command:
        cmd: systemctl status {{ lxc_exporter_service_name }}
      register: service_status
      changed_when: false

    - name: Display comprehensive status
      ansible.builtin.debug:
        msg: |
          ===== LXC Metrics Service Deployment Status =====
          
          ðŸ§¹ CLEANUP RESULTS:
          - Port 9100 cleanup: {{ 'SUCCESS' if port_cleanup.rc == 0 else 'PARTIAL' }}
          - Old services stopped: âœ…
          - Old files removed: âœ…
          
          ðŸš€ DEPLOYMENT RESULTS:
          - Service Status: {{ 'RUNNING' if 'active (running)' in service_status.stdout else 'FAILED' }}
          - Metrics endpoint: {{ 'OK' if metrics_test.status == 200 else 'FAILED' }}
          - Health endpoint: {{ 'OK' if health_test.status == 200 else 'FAILED' }}
          - Service URL: http://{{ ansible_default_ipv4.address }}:9100
          
          ðŸ“‹ SERVICE LOG (last 10 lines):

    - name: Show recent service logs
      ansible.builtin.command:
        cmd: journalctl -u {{ lxc_exporter_service_name }} -n 10 --no-pager
      register: service_logs
      changed_when: false

    - name: Display service logs
      ansible.builtin.debug:
        var: service_logs.stdout_lines

    - name: Verify port 9100 is properly bound
      ansible.builtin.command:
        cmd: ss -tlnp | grep :9100
      register: port_check
      changed_when: false

    - name: Display port status
      ansible.builtin.debug:
        msg: |
          Port 9100 Status:
          {{ port_check.stdout if port_check.stdout else 'No process listening on port 9100' }}
