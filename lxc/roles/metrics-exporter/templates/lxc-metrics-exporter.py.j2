#!/usr/bin/env python3

import subprocess
import time
import threading
import os
import sys
from flask import Flask, Response, jsonify

# Configuration from Ansible
COLLECTION_INTERVAL = {{ metrics_collection_interval | default(5) }}  # seconds
METRICS_FILE = '/var/lib/otelcol-contrib/lxc_metrics.prom'
SCRIPT_PATH = '/opt/lxc-metrics/lxc-metrics.sh'

# Flask app setup
app = Flask(__name__)

# Global variables to store current metrics
current_metrics = ""
metrics_lock = threading.Lock()
last_update_time = 0
collection_errors = 0
total_collections = 0

def log_message(message, level="INFO"):
    """Simple logging function"""
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] [{level}] {message}", flush=True)

def collect_metrics():
    """Background thread function to collect metrics at regular intervals"""
    global current_metrics, last_update_time, collection_errors, total_collections
    
    log_message("Starting background metrics collection thread")
    
    while True:
        try:
            start_time = time.time()
            total_collections += 1
            
            # Run the metrics collection script
            log_message(f"Running metrics collection script: {SCRIPT_PATH}")
            result = subprocess.run([SCRIPT_PATH], 
                                  check=True, 
                                  timeout=30,
                                  capture_output=True,
                                  text=True)
            
            # Read the fresh metrics
            with open(METRICS_FILE, 'r') as f:
                fresh_metrics = f.read()
            
            # Update global metrics with thread safety
            with metrics_lock:
                current_metrics = fresh_metrics
                last_update_time = time.time()
            
            collection_time = time.time() - start_time
            log_message(f"Metrics collection completed in {collection_time:.2f}s")
                
        except subprocess.CalledProcessError as e:
            collection_errors += 1
            error_msg = f"Error running metrics script (exit code {e.returncode})"
            if e.stderr:
                error_msg += f": {e.stderr.strip()}"
            log_message(error_msg, "ERROR")
            
        except subprocess.TimeoutExpired:
            collection_errors += 1
            log_message("Metrics script timed out after 30 seconds", "ERROR")
            
        except FileNotFoundError as e:
            collection_errors += 1
            if SCRIPT_PATH in str(e):
                log_message(f"Metrics script not found: {SCRIPT_PATH}", "ERROR")
            else:
                log_message(f"Metrics file not found: {METRICS_FILE}", "ERROR")
                
        except Exception as e:
            collection_errors += 1
            log_message(f"Unexpected error collecting metrics: {e}", "ERROR")
            
        # Wait for next collection cycle
        time.sleep(COLLECTION_INTERVAL)

@app.route('/metrics')
def metrics():
    """Serve the most recently collected metrics"""
    with metrics_lock:
        if current_metrics:
            return Response(current_metrics, mimetype='text/plain')
        else:
            # No metrics available yet
            return Response("# No metrics available yet - collection in progress\n", 
                          mimetype='text/plain', status=503)

@app.route('/health')
def health():
    """Health check endpoint with detailed status"""
    with metrics_lock:
        age = time.time() - last_update_time if last_update_time > 0 else float('inf')
        metrics_available = bool(current_metrics)
    
    # Determine health status
    is_healthy = age < COLLECTION_INTERVAL * 2 and metrics_available
    status_code = 200 if is_healthy else 503
    
    # Build health response
    health_data = {
        "status": "healthy" if is_healthy else "unhealthy",
        "last_update_seconds_ago": round(age, 1) if age != float('inf') else None,
        "metrics_available": metrics_available,
        "collection_interval": COLLECTION_INTERVAL,
        "total_collections": total_collections,
        "collection_errors": collection_errors,
        "error_rate": round(collection_errors / max(total_collections, 1) * 100, 1),
        "script_path": SCRIPT_PATH,
        "metrics_file": METRICS_FILE
    }
    
    return jsonify(health_data), status_code

@app.route('/status')
def status():
    """Detailed status endpoint for debugging"""
    with metrics_lock:
        age = time.time() - last_update_time if last_update_time > 0 else float('inf')
        metrics_size = len(current_metrics) if current_metrics else 0
    
    # Check if script exists and is executable
    script_exists = os.path.exists(SCRIPT_PATH)
    script_executable = os.access(SCRIPT_PATH, os.X_OK) if script_exists else False
    
    # Check if metrics directory exists and is writable
    metrics_dir = os.path.dirname(METRICS_FILE)
    metrics_dir_exists = os.path.exists(metrics_dir)
    metrics_dir_writable = os.access(metrics_dir, os.W_OK) if metrics_dir_exists else False
    
    status_data = {
        "service": {
            "name": "lxc-metrics-exporter",
            "version": "2.0",
            "uptime_seconds": round(time.time() - app.start_time, 1),
            "collection_interval": COLLECTION_INTERVAL
        },
        "metrics": {
            "last_update_seconds_ago": round(age, 1) if age != float('inf') else None,
            "metrics_size_bytes": metrics_size,
            "total_collections": total_collections,
            "collection_errors": collection_errors,
            "success_rate": round((total_collections - collection_errors) / max(total_collections, 1) * 100, 1)
        },
        "files": {
            "script_path": SCRIPT_PATH,
            "script_exists": script_exists,
            "script_executable": script_executable,
            "metrics_file": METRICS_FILE,
            "metrics_dir_exists": metrics_dir_exists,
            "metrics_dir_writable": metrics_dir_writable
        },
        "system": {
            "python_version": sys.version.split()[0],
            "pid": os.getpid(),
            "working_directory": os.getcwd()
        }
    }
    
    return jsonify(status_data)

@app.route('/')
def index():
    """Simple index page with links to endpoints"""
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>LXC Metrics Exporter</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .endpoint { margin: 10px 0; }
            .endpoint a { text-decoration: none; color: #0066cc; }
            .endpoint a:hover { text-decoration: underline; }
        </style>
    </head>
    <body>
        <h1>LXC Metrics Exporter</h1>
        <p>Background metrics collection service for LXC containers</p>
        
        <h2>Available Endpoints:</h2>
        <div class="endpoint"><a href="/metrics">/metrics</a> - Prometheus metrics (text format)</div>
        <div class="endpoint"><a href="/health">/health</a> - Health check (JSON)</div>
        <div class="endpoint"><a href="/status">/status</a> - Detailed status (JSON)</div>
        
        <h2>Configuration:</h2>
        <ul>
            <li>Collection Interval: """ + str(COLLECTION_INTERVAL) + """ seconds</li>
            <li>Script Path: """ + SCRIPT_PATH + """</li>
            <li>Metrics File: """ + METRICS_FILE + """</li>
        </ul>
    </body>
    </html>
    """
    return html

def validate_configuration():
    """Validate configuration before starting"""
    errors = []
    
    # Check if script exists and is executable
    if not os.path.exists(SCRIPT_PATH):
        errors.append(f"Metrics script not found: {SCRIPT_PATH}")
    elif not os.access(SCRIPT_PATH, os.X_OK):
        errors.append(f"Metrics script not executable: {SCRIPT_PATH}")
    
    # Check if metrics directory exists and is writable
    metrics_dir = os.path.dirname(METRICS_FILE)
    if not os.path.exists(metrics_dir):
        try:
            os.makedirs(metrics_dir, exist_ok=True)
        except Exception as e:
            errors.append(f"Cannot create metrics directory {metrics_dir}: {e}")
    elif not os.access(metrics_dir, os.W_OK):
        errors.append(f"Metrics directory not writable: {metrics_dir}")
    
    return errors

if __name__ == '__main__':
    # Record start time for uptime calculation
    app.start_time = time.time()
    
    log_message("Starting LXC Metrics Exporter v2.0")
    log_message(f"Configuration: Collection interval={COLLECTION_INTERVAL}s, Script={SCRIPT_PATH}")
    
    # Validate configuration
    config_errors = validate_configuration()
    if config_errors:
        log_message("Configuration errors found:", "ERROR")
        for error in config_errors:
            log_message(f"  - {error}", "ERROR")
        sys.exit(1)
    
    # Start the background metrics collection thread
    log_message("Starting background metrics collection thread")
    metrics_thread = threading.Thread(target=collect_metrics, daemon=True)
    metrics_thread.start()
    
    # Give the collection thread a moment to run initial collection
    log_message("Waiting for initial metrics collection...")
    time.sleep(min(3, COLLECTION_INTERVAL))
    
    # Start the Flask web server
    log_message("Starting Flask web server on 0.0.0.0:9100")
    try:
        app.run(host='0.0.0.0', port=9100, debug=False, threaded=True)
    except KeyboardInterrupt:
        log_message("Received interrupt signal, shutting down...")
    except Exception as e:
        log_message(f"Error starting web server: {e}", "ERROR")
        sys.exit(1)