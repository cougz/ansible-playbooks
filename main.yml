---
- name: Platform-Agnostic Metrics Management
  hosts: "{{ target_hosts | default('all') }}"
  gather_facts: yes
  
  vars:
    install_metrics_exporter: "{{ component_selection | default('metrics-exporter') in ['metrics-exporter', 'all'] }}"
  
  pre_tasks:
    - name: Debug survey variables
      debug:
        msg: |
          ==========================================
          Survey Variables Debug
          ==========================================
          action_type: "{{ action_type | default('undefined') }}"
          component_selection: "{{ component_selection | default('undefined') }}" 
          target_hosts: "{{ target_hosts | default('undefined') }}"
          force_removal: "{{ force_removal | default('undefined') }}"
          install_metrics_exporter: "{{ install_metrics_exporter }}"
          ==========================================
          
    - name: Clean up broken installations if needed
      file:
        path: /opt/metrics-exporters
        state: absent
      become: yes
      when: 
        - action_type == 'reinstall'
        - install_metrics_exporter | bool
      tags: cleanup

    - name: Display execution plan
      debug:
        msg: |
          ==========================================
          Metrics Management Operation
          ==========================================
          Action: {{ action_type }}
          Component: {{ component_selection }}
          Target Hosts: {{ target_hosts }}
          Current Host: {{ inventory_hostname }}
          Platform: {{ ansible_distribution }} {{ ansible_distribution_version }}
          {% if action_type == 'uninstall' %}
          Force user/group removal: {{ force_removal }}
          {% endif %}
          ==========================================
  
    - name: Set derived action flags
      set_fact:
        perform_install: "{{ action_type == 'install' }}"
        perform_configure: "{{ action_type in ['install', 'update', 'reinstall'] }}"
        perform_uninstall: "{{ action_type == 'uninstall' }}"
        perform_reinstall: "{{ action_type == 'reinstall' }}"
        update_existing: "{{ action_type == 'update' }}"
        
    - name: Debug derived flags
      debug:
        msg: |
          ==========================================
          Derived Action Flags
          ==========================================
          perform_install: {{ perform_install }}
          perform_configure: {{ perform_configure }}
          perform_uninstall: {{ perform_uninstall }}
          perform_reinstall: {{ perform_reinstall }}
          update_existing: {{ update_existing }}
          install_metrics_exporter: {{ install_metrics_exporter }}
          ==========================================

  tasks:
    # ===================
    # UNINSTALL TASKS
    # ===================
    
    - name: "UNINSTALL: Stop Metrics Exporter service"
      ansible.builtin.systemd:
        name: metrics-exporter
        state: stopped
        enabled: no
      become: yes
      ignore_errors: yes
      when: perform_uninstall | bool and install_metrics_exporter | bool
      
    - name: "UNINSTALL: Remove Metrics Exporter systemd service file"
      ansible.builtin.file:
        path: /etc/systemd/system/metrics-exporter.service
        state: absent
      become: yes
      when: perform_uninstall | bool and install_metrics_exporter | bool
    
    - name: "UNINSTALL: Remove Metrics Exporter installation directory"
      ansible.builtin.file:
        path: /opt/metrics-exporters
        state: absent
      become: yes
      when: perform_uninstall | bool and install_metrics_exporter | bool
    
    - name: "UNINSTALL: Reload systemd daemon after service removal"
      ansible.builtin.systemd:
        daemon_reload: yes
      become: yes
      when: perform_uninstall | bool
    
    - name: "UNINSTALL: Check if otelcol user has running processes"
      ansible.builtin.shell: |
        ps -u otelcol -o pid= 2>/dev/null | wc -l
      register: otelcol_processes
      become: yes
      ignore_errors: yes
      when: perform_uninstall | bool and force_removal | bool
    
    - name: "UNINSTALL: Remove otelcol user (when force_removal is true)"
      ansible.builtin.user:
        name: otelcol
        state: absent
        remove: yes
        force: yes
      become: yes
      when: 
        - perform_uninstall | bool
        - force_removal | bool
        - (otelcol_processes.stdout | default('0') | int) == 0
      ignore_errors: yes
    
    - name: "UNINSTALL: Remove otelcol group (when force_removal is true)"
      ansible.builtin.group:
        name: otelcol
        state: absent
      become: yes
      when: 
        - perform_uninstall | bool
        - force_removal | bool
      ignore_errors: yes
    
    - name: "UNINSTALL: Clean up any remaining temp files"
      ansible.builtin.find:
        paths:
          - /tmp
          - /var/tmp
        patterns:
          - "metrics-exporter*"
        file_type: file
        age: "1d"
      register: temp_files
      become: yes
      when: perform_uninstall | bool
    
    - name: "UNINSTALL: Remove temp files"
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      become: yes
      loop: "{{ temp_files.files | default([]) }}"
      ignore_errors: yes
      when: perform_uninstall | bool
    
    - name: "UNINSTALL: Display uninstall summary"
      debug:
        msg: |
          ==========================================
          Uninstall Summary for {{ inventory_hostname }}
          ==========================================
          
          Component Removed: Metrics Exporter (FastAPI)
          - Service: metrics-exporter
          - Install: /opt/metrics-exporters/
          
          {% if force_removal %}
          User/Group Removal:
          - otelcol user: {{ 'Removed' if (otelcol_processes.stdout | default('0') | int) == 0 else 'Skipped (processes running)' }}
          - otelcol group: Attempted removal
          {% else %}
          User/Group Status:
          - otelcol user/group: Preserved (set force_removal=true to remove)
          {% endif %}
          
          ==========================================
      when: perform_uninstall | bool

  roles:
    # Common setup tasks (only run when NOT uninstalling)
    - role: roles/common
      when: not perform_uninstall | bool and install_metrics_exporter | bool
    
    # Install/Update roles with enhanced flags
    - role: roles/fastapi-metrics-exporter
      when: install_metrics_exporter | bool and not perform_uninstall | bool
      vars:
        install_exporter: "{{ perform_install }}"
        configure_exporter: "{{ perform_configure }}"
        update_existing: "{{ update_existing }}"
        force_reinstall: "{{ perform_reinstall }}"

  post_tasks:
    - name: Final status message for install/update operations
      debug:
        msg: |
          ==========================================
          {{ action_type | title }} operation completed successfully!
          ==========================================
          Component: {{ component_selection }}
          Host: {{ inventory_hostname }}
          Platform: {{ ansible_distribution }} {{ ansible_distribution_version }}
          
          {% if action_type in ['install', 'update', 'reinstall'] and install_metrics_exporter | bool %}
          Metrics Exporter (FastAPI):
          - Status: Running
          - Service: metrics-exporter
          - OTLP Endpoint: Configured
          {% endif %}
          ==========================================
      when: not perform_uninstall | bool
