#!/bin/bash
# pve-metrics-script.sh - Proxmox-specific metrics collection
# This script collects metrics specific to Proxmox hosts, including ZFS pools,
# NVMe SMART temperature data, CPU temperatures, CPU load average,
# and other general system resources like memory and network I/O.

# Disable color output to prevent ANSI escape sequences
export NO_COLOR=1
export TERM=dumb

# Define the output file for Prometheus metrics
METRICS_OUTPUT_FILE="/var/lib/otelcol-contrib/pve_metrics.prom"
TEMP_OUTPUT_FILE="${METRICS_OUTPUT_FILE}.tmp"

# --- Debugging setup ---
# Log file for script execution debug messages
DEBUG_LOG="/tmp/pve_metrics_script_debug.log"

# Function to write debug messages (more robust for file creation/permissions)
debug_log() {
    # Attempt to create the directory if it doesn't exist; ignore errors if it exists
    mkdir -p "$(dirname "$DEBUG_LOG")" 2>/dev/null || true
    # Attempt to touch the file to ensure it exists; ignore errors
    touch "$DEBUG_LOG" 2>/dev/null || true

    # Now, attempt to write to the file. If that fails, fallback to stderr.
    echo "$(date -Iseconds) [DEBUG] $1" >> "$DEBUG_LOG" 2>&1 || \
    {
        echo "$(date -Iseconds) [DEBUG] (Fallback to stderr) $1" >&2
    }
}

# Clear the debug log at the start of each run (optional, remove if you want historical logs)
# Use '|| true' to prevent script exit if deletion fails
> "$DEBUG_LOG" || true
debug_log "Script started."

# --- End Debugging setup ---

# Function to strip ANSI color codes from text
strip_colors() {
    echo "$1" | sed 's/\x1b\[[0-9;]*m//g'
}

# Function to output metric with labels
output_metric() {
    local metric_name=$1
    local metric_type=$2
    local value=$3
    local additional_labels=$4

    # Strip any ANSI color codes from the value and labels
    value=$(strip_colors "$value")
    additional_labels=$(strip_colors "$additional_labels")

    echo "# TYPE $metric_name $metric_type"
    echo "${metric_name}{${additional_labels}} $value"
    debug_log "Metric output: ${metric_name}{${additional_labels}} $value"
}

# Function to convert human readable sizes to bytes
convert_to_bytes() {
    local size=$1
    local number=$(echo "$size" | sed 's/[KMGT]$//')
    local unit=$(echo "$size" | sed 's/[0-9.]*//g')

    case "$unit" in
        "K") echo "$number * 1024" | bc -l | cut -d. -f1 ;;
        "M") echo "$number * 1024 * 1024" | bc -l | cut -d. -f1 ;;
        "G") echo "$number * 1024 * 1024 * 1024" | bc -l | cut -d. -f1 ;;
        "T") echo "$number * 1024 * 1024 * 1024 * 1024" | bc -l | cut -d. -f1 ;;
        *) echo "$number" | cut -d. -f1 ;;
    esac
}

# Function to extract temperature value from sensors output (this is for 'sensors' command, not NVMe)
extract_temp() {
    echo "$1" | grep -oE '\+[0-9]+\.[0-9]+°C' | head -1 | sed 's/+\([0-9.]*\)°C/\1/'
}

{ # Start of the block redirected to the temporary file

    echo "# Proxmox VE metrics"
    echo "# Generated at $(date -Iseconds)"

    debug_log "Collecting NVMe SMART Temperature Metrics..."
    # === NVMe SMART Temperature Metrics (only) ===
    if command -v nvme >/dev/null 2>&1; then
        debug_log "nvme command found."
        # Check for NVMe devices directly
        for nvme_device in /dev/nvme[0-9]; do
            if [ -e "$nvme_device" ]; then
                device_name=$(basename "$nvme_device")
                debug_log "Found NVMe device: $nvme_device"

                # Get SMART data using nvme-cli with color suppression
                smart_output=$(TERM=dumb NO_COLOR=1 /usr/sbin/nvme smart-log "$nvme_device" 2>&1 | sed 's/\x1b\[[0-9;]*m//g')
                smart_status=$?

                if [ $smart_status -eq 0 ]; then
                    debug_log "nvme smart-log for $nvme_device succeeded."

                    # Use 'id-ctrl' instead of 'identify' for controller information
                    id_ctrl_output=$(TERM=dumb NO_COLOR=1 /usr/sbin/nvme id-ctrl "$nvme_device" 2>&1 | sed 's/\x1b\[[0-9;]*m//g')
                    id_ctrl_status=$?

                    model="unknown"
                    serial="unknown"
                    firmware="unknown"

                    if [ $id_ctrl_status -ne 0 ]; then
                        debug_log "# ERROR: Failed to run nvme id-ctrl for $nvme_device. Output: $id_ctrl_output"
                    else
                        # Extract model, serial, firmware from id-ctrl output (using 'mn', 'sn', 'fr')
                        model=$(echo "$id_ctrl_output" | grep -E '^\s*mn\s*:' | awk -F':' '{print $2}' | xargs)
                        serial=$(echo "$id_ctrl_output" | grep -E '^\s*sn\s*:' | awk -F':' '{print $2}' | xargs)
                        firmware=$(echo "$id_ctrl_output" | grep -E '^\s*fr\s*:' | awk -F':' '{print $2}' | xargs)
                        debug_log "Identified $device_name - Model: '$model', Serial: '$serial', Firmware: '$firmware'"
                    fi

                    # Extract ONLY temperature values from nvme smart-log output
                    temperature=$(echo "$smart_output" | grep -E '^\s*temperature\s*:' | awk -F':' '{print $2}' | awk '{print $1}' | sed 's/°C.*//')
                    temp_sensor_1=$(echo "$smart_output" | grep -E '^\s*Temperature Sensor 1\s*:' | awk -F':' '{print $2}' | awk '{print $1}' | sed 's/°C.*//')
                    temp_sensor_2=$(echo "$smart_output" | grep -E '^\s*Temperature Sensor 2\s*:' | awk -F':' '{print $2}' | awk '{print $1}' | sed 's/°C.*//')

                    # Output ONLY NVMe temperature metrics with device labels
                    labels="device=\"$device_name\",model=\"$model\",serial=\"$serial\",firmware=\"$firmware\""

                    if [ -n "$temperature" ]; then
                        output_metric "pve_nvme_temperature_celsius" "gauge" "$temperature" "$labels"
                    fi
                    if [ -n "$temp_sensor_1" ]; then
                        output_metric "pve_nvme_temperature_sensor1_celsius" "gauge" "$temp_sensor_1" "$labels"
                    fi
                    if [ -n "$temp_sensor_2" ]; then
                        output_metric "pve_nvme_temperature_sensor2_celsius" "gauge" "$temp_sensor_2" "$labels"
                    fi

                else
                    debug_log "Failed to get nvme smart-log for $nvme_device. Error: $smart_output"
                    # Only output the first line of error, stripped of ANSI codes
                    clean_error=$(echo "$smart_output" | sed 's/\x1b\[[0-9;]*m//g' | head -1)
                    echo "# WARN: Failed to collect NVMe SMART temperature data for $nvme_device: $clean_error"
                fi
            else
                debug_log "NVMe device $nvme_device does not exist."
            fi
        done
    else
        debug_log "nvme command not found, skipping NVMe temperature metrics."
    fi

    debug_log "Collecting CPU Temperature Metrics..."
    # === CPU Temperature Metrics ===
    # Using 'sensors' command to get CPU core temperatures
    if command -v sensors >/dev/null 2>&1; then
        debug_log "sensors command found."
        sensors_output=$(TERM=dumb NO_COLOR=1 sensors 2>/dev/null | sed 's/\x1b\[[0-9;]*m//g')
        if [ $? -eq 0 ]; then
            # Package temperature
            package_temp=$(echo "$sensors_output" | grep -E '^(Package id 0|CPU Total):' | grep -oE '\+[0-9]+\.[0-9]+°C' | head -1 | sed 's/+\([0-9.]*\)°C/\1/')
            if [ -n "$package_temp" ]; then
                output_metric "pve_cpu_package_temperature_celsius" "gauge" "$package_temp" ""
            fi

            # Core temperatures
            echo "$sensors_output" | grep "Core " | while read -r line; do
                core_id=$(echo "$line" | awk '{print $2}' | sed 's/://')
                core_temp=$(extract_temp "$line")
                if [ -n "$core_temp" ]; then
                    output_metric "pve_cpu_core_temperature_celsius" "gauge" "$core_temp" "core=\"$core_id\""
                fi
            done
        else
            debug_log "Failed to run sensors command. Output: $sensors_output"
            echo "# WARN: Failed to collect CPU temperatures: $(echo "$sensors_output" | head -1)"
        fi
    else
        debug_log "sensors command not found, skipping CPU temperature metrics."
    fi

    debug_log "Collecting ZFS Pool Metrics..."
    # === ZFS Pool Metrics ===
    if command -v zpool >/dev/null 2>&1; then
        debug_log "zpool command found."
        zpool_list=$(zpool list -p -H 2>/dev/null)
        if [ $? -eq 0 ]; then
            echo "$zpool_list" | while read -r line; do
                pool_name=$(echo "$line" | awk '{print $1}')
                size=$(echo "$line" | awk '{print $2}')
                allocated=$(echo "$line" | awk '{print $3}')
                free=$(echo "$line" | awk '{print $4}')
                fragmentation=$(echo "$line" | awk '{print $5}' | sed 's/%//')
                capacity=$(echo "$line" | awk '{print $6}' | sed 's/%//')
                dedup_ratio=$(echo "$line" | awk '{print $7}')
                health=$(echo "$line" | awk '{print $9}')
                status=$(echo "$line" | awk '{print $10}')

                labels="pool=\"$pool_name\""

                output_metric "pve_zfs_pool_size_bytes" "gauge" "$size" "$labels"
                output_metric "pve_zfs_pool_allocated_bytes" "gauge" "$allocated" "$labels"
                output_metric "pve_zfs_pool_free_bytes" "gauge" "$free" "$labels"
                if [ -n "$fragmentation" ] && [ "$fragmentation" != "-" ]; then
                    output_metric "pve_zfs_pool_fragmentation_percent" "gauge" "$fragmentation" "$labels"
                fi
                if [ -n "$capacity" ] && [ "$capacity" != "-" ]; then
                    output_metric "pve_zfs_pool_capacity_percent" "gauge" "$capacity" "$labels"
                fi
                # Fix for dedup_ratio - ensure it's numeric
                if [ -n "$dedup_ratio" ] && [ "$dedup_ratio" != "-" ]; then
                    output_metric "pve_zfs_pool_dedup_ratio" "gauge" "$dedup_ratio" "$labels"
                fi

                # Health status: ONLINE=1, other=0
                # Fix: Ensure health and status are properly sanitized
                health_value=0
                if [ "$health" = "ONLINE" ]; then
                    health_value=1
                fi
                
                # Sanitize status value to prevent parsing errors
                safe_status=$(echo "$status" | tr -d '"' | tr -d "'" | tr ' ' '_')
                if [ -z "$safe_status" ]; then
                    safe_status="unknown"
                fi
                
                output_metric "pve_zfs_pool_health" "gauge" "$health_value" "${labels},status=\"$safe_status\""
            done
        else
            debug_log "Failed to run zpool list. Output: $(zpool list -p -H 2>&1)"
            echo "# WARN: Failed to collect ZFS pool data: $(zpool list -p -H 2>&1 | head -1)"
        fi
    else
        debug_log "zpool command not found, skipping ZFS pool metrics."
    fi

    debug_log "Collecting ZFS Dataset Metrics..."
    # === ZFS Dataset Metrics ===
    if command -v zfs >/dev/null 2>&1; then
        debug_log "zfs command found."
        zfs_list=$(zfs list -o name,used,avail,referenced,mountpoint -p -H 2>/dev/null)
        if [ $? -eq 0 ]; then
            echo "$zfs_list" | while read -r line; do
                dataset_name=$(echo "$line" | awk '{print $1}')
                used=$(echo "$line" | awk '{print $2}')
                available=$(echo "$line" | awk '{print $3}')
                referenced=$(echo "$line" | awk '{print $4}')
                mountpoint=$(echo "$line" | awk '{print $5}')

                labels="dataset=\"$dataset_name\""
                if [ -n "$mountpoint" ] && [ "$mountpoint" != "-" ]; then
                    labels="${labels},mountpoint=\"$mountpoint\""
                fi

                output_metric "pve_zfs_dataset_used_bytes" "gauge" "$used" "$labels"
                output_metric "pve_zfs_dataset_available_bytes" "gauge" "$available" "$labels"
                output_metric "pve_zfs_dataset_referenced_bytes" "gauge" "$referenced" "$labels"
            done
        else
            debug_log "Failed to run zfs list. Output: $(zfs list -o name,used,avail,referenced,mountpoint -p -H 2>&1)"
            echo "# WARN: Failed to collect ZFS dataset data: $(zfs list -o name,used,avail,referenced,mountpoint -p -H 2>&1 | head -1)"
        fi
    else
        debug_log "zfs command not found, skipping ZFS dataset metrics."
    fi

    debug_log "Collecting Proxmox Cluster Metrics..."
    # === Proxmox Cluster Metrics ===
    # Check if this is a cluster node
    if command -v pvecm >/dev/null 2>&1 && pvecm status &>/dev/null; then
        debug_log "pvecm command found and cluster status accessible."
        # Quorum status
        quorum=$(pvecm status | grep "Quorum:" | awk '{print $2}')
        if [ -n "$quorum" ]; then
            quorum_value=0
            if [ "$quorum" = "yes" ]; then
                quorum_value=1
            fi
            output_metric "pve_cluster_quorum" "gauge" "$quorum_value" ""
        fi

        # Number of nodes
        nodes_total=$(pvecm nodes | wc -l)
        if [ "$nodes_total" -gt 0 ]; then
            nodes_total=$((nodes_total - 1)) # Exclude header
            output_metric "pve_cluster_nodes_total" "gauge" "$nodes_total" ""
        fi

        # Number of online nodes
        nodes_online=$(pvecm nodes | grep "online" | wc -l)
        output_metric "pve_cluster_nodes_online" "gauge" "$nodes_online" ""
    else
        debug_log "pvecm command not found or cluster status not accessible, skipping cluster metrics."
    fi

    debug_log "Collecting Proxmox Version Info..."
    # === Proxmox Version Info ===
    if [ -f /etc/debian_version ] && grep -q "Proxmox" /etc/os-release; then
        debug_log "Proxmox OS detected."
        pve_version=$(pveversion | head -n 1 | awk '{print $2}' | sed 's/#.*//')
        # Use an empty string for the value, as the version is in the label
        output_metric "pve_version_info" "gauge" "1" "version=\"$pve_version\""
    else
        debug_log "Proxmox OS not detected, skipping Proxmox version info."
    fi

    debug_log "Collecting System Resource Metrics..."
    # === System Resource Metrics (General Linux/Proxmox) ===
    # Memory
    mem_info=$(free -b | grep "Mem:")
    mem_total=$(echo "$mem_info" | awk '{print $2}')
    mem_used=$(echo "$mem_info" | awk '{print $3}')
    mem_free=$(echo "$mem_info" | awk '{print $4}')
    mem_available=$(echo "$mem_info" | awk '{print $7}') # 'available' is more relevant than 'free'

    output_metric "pve_memory_total_bytes" "gauge" "$mem_total" ""
    output_metric "pve_memory_used_bytes" "gauge" "$mem_used" ""
    output_metric "pve_memory_free_bytes" "gauge" "$mem_free" ""
    output_metric "pve_memory_available_bytes" "gauge" "$mem_available" ""

    # CPU Load Average
    load_avg=$(cat /proc/loadavg)
    load_1m=$(echo "$load_avg" | awk '{print $1}')
    load_5m=$(echo "$load_avg" | awk '{print $2}')
    load_15m=$(echo "$load_avg" | awk '{print $3}')
    cpu_count=$(grep -c ^processor /proc/cpuinfo)

    output_metric "pve_cpu_count" "gauge" "$cpu_count" ""
    output_metric "pve_load_average_1m" "gauge" "$load_1m" ""
    output_metric "pve_load_average_5m" "gauge" "$load_5m" ""
    output_metric "pve_load_average_15m" "gauge" "$load_15m" ""

    # Network I/O
    # Exclude loopback (lo) and bridge interfaces (vmbr, docker0, etc.)
    # Adjust regex to include bond/other specific interfaces if needed
    for iface in $(ls -1 /sys/class/net | grep -E -v '^(lo|vmbr|docker|veth|br-)' 2>/dev/null); do
        if [ -d "/sys/class/net/$iface/statistics" ]; then
            rx_bytes=$(cat "/sys/class/net/$iface/statistics/rx_bytes" 2>/dev/null)
            tx_bytes=$(cat "/sys/class/net/$iface/statistics/tx_bytes" 2>/dev/null)
            rx_packets=$(cat "/sys/class/net/$iface/statistics/rx_packets" 2>/dev/null)
            tx_packets=$(cat "/sys/class/net/$iface/statistics/tx_packets" 2>/dev/null)

            if [ -n "$rx_bytes" ]; then
                output_metric "pve_network_rx_bytes_total" "counter" "$rx_bytes" "interface=\"$iface\""
            fi
            if [ -n "$tx_bytes" ]; then
                output_metric "pve_network_tx_bytes_total" "counter" "$tx_bytes" "interface=\"$iface\""
            fi
            if [ -n "$rx_packets" ]; then
                output_metric "pve_network_rx_packets_total" "counter" "$rx_packets" "interface=\"$iface\""
            fi
            if [ -n "$tx_packets" ]; then
                output_metric "pve_network_tx_packets_total" "counter" "$tx_packets" "interface=\"$iface\""
            fi
        fi
    done

    echo "# End of metrics"
    debug_log "Script finished successfully."

# Write all generated metrics to a temporary file, then move it atomically
} > "$TEMP_OUTPUT_FILE" && mv "$TEMP_OUTPUT_FILE" "$METRICS_OUTPUT_FILE" || {
    # If the script fails, log it and optionally delete the temp file
    debug_log "Script failed at some point, metrics file not updated."
    rm -f "$TEMP_OUTPUT_FILE" || true
}
