#!/bin/bash
# lxc-metrics-script.sh

# Define the output file for Prometheus metrics
METRICS_OUTPUT_FILE="/var/lib/otelcol-contrib/lxc_metrics.prom"

# Common sampling interval for CPU and Network rate calculations
SAMPLING_INTERVAL_SECONDS=5

# Create necessary directories and ensure ownership
mkdir -p "$(dirname "$METRICS_OUTPUT_FILE")"
chown otelcol:otelcol "$(dirname "$METRICS_OUTPUT_FILE")"

# Function to output metric with minimal labels (only those inherent to the metric itself)
output_metric() {
    local metric_name=$1
    local metric_type=$2
    local value=$3
    local additional_labels=$4

    echo "# TYPE $metric_name $metric_type"
    echo "${metric_name}{${additional_labels}} $value"
}

# Function to convert human readable sizes to bytes (re-used for disk metrics)
convert_to_bytes() {
    local size=$1
    local number=$(echo "$size" | sed 's/[KMGT]$//')
    local unit=$(echo "$size" | sed 's/[0-9.]*//g')

    case "$unit" in
        "K") echo "$number * 1024" | bc -l | cut -d. -f1 ;;
        "M") echo "$number * 1024 * 1024" | bc -l | cut -d. -f1 ;;
        "G") echo "$number * 1024 * 1024 * 1024" | bc -l | cut -d. -f1 ;;
        "T") echo "$number * 1024 * 1024 * 1024 * 1024" | bc -l | cut -d. -f1 ;;
        *) echo "$number" | cut -d. -f1 ;;  # Already in bytes
    esac
}

# --- Start of Metric Generation ---
# All script output from here will be redirected to the METRICS_OUTPUT_FILE
{
    echo "# OpenTelemetry metrics for LXC"

    # === Pre-sampling Data Collection (for rate calculations) ===
    # CPU Initial Usage
    CPU_STAT_FILE="/sys/fs/cgroup/cpu.stat"
    if [ -f "$CPU_STAT_FILE" ]; then
        CPU_USAGE_USEC_1=$(grep "usage_usec" "$CPU_STAT_FILE" | awk '{print $2}')
    else
        CPU_USAGE_USEC_1=0 # Set to 0 if file not found to prevent errors
    fi

    # Network Initial Usage (store current values for calculation after sleep)
    # Using associative arrays to store values for each interface
    declare -A NET_RX_BYTES_1 NET_TX_BYTES_1
    declare -A NET_RX_PACKETS_1 NET_TX_PACKETS_1
    declare -A NET_RX_ERRORS_1 NET_TX_ERRORS_1
    declare -A NET_RX_DROPPED_1 NET_TX_DROPPED_1

    # Get list of interfaces and store their initial stats - FILTERING FOR ETH0 ONLY
    declare -a NET_INTERFACES_TO_MONITOR
    declare -A NET_IFACE_LOGICAL_NAME_MAP

    IFS=$'\n' read -r -d '' -a IP_LINK_OUTPUT_LINES < <(ip -o link show)

    for line in "${IP_LINK_OUTPUT_LINES[@]}"; do
        if [[ "$line" =~ ^[0-9]+:\ (eth0@if[0-9]+): ]]; then
            net_iface_logical_name="${BASH_REMATCH[1]}"
            net_iface_sysfs_name="eth0"
            NET_INTERFACES_TO_MONITOR+=("$net_iface_sysfs_name")
            NET_IFACE_LOGICAL_NAME_MAP["$net_iface_sysfs_name"]="$net_iface_logical_name"
        fi
    done

    # Store initial stats for detected interfaces
    for sysfs_name in "${NET_INTERFACES_TO_MONITOR[@]}"; do
        if [ -f "/sys/class/net/$sysfs_name/statistics/rx_bytes" ]; then
            NET_RX_BYTES_1[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/rx_bytes")
            NET_TX_BYTES_1[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/tx_bytes")
            NET_RX_PACKETS_1[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/rx_packets")
            NET_TX_PACKETS_1[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/tx_packets")
            NET_RX_ERRORS_1[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/rx_errors")
            NET_TX_ERRORS_1[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/tx_errors")
            NET_RX_DROPPED_1[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/rx_dropped" 2>/dev/null || echo "0")
            NET_TX_DROPPED_1[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/tx_dropped" 2>/dev/null || echo "0")
        fi
    done

    # --- Wait for Sampling Interval ---
    sleep "$SAMPLING_INTERVAL_SECONDS"

    # === Post-sampling Data Collection ===
    # CPU Final Usage
    if [ -f "$CPU_STAT_FILE" ]; then
        CPU_USAGE_USEC_2=$(grep "usage_usec" "$CPU_STAT_FILE" | awk '{print $2}')
    else
        CPU_USAGE_USEC_2=0
    fi

    # Network Final Usage
    declare -A NET_RX_BYTES_2 NET_TX_BYTES_2
    declare -A NET_RX_PACKETS_2 NET_TX_PACKETS_2
    declare -A NET_RX_ERRORS_2 NET_TX_ERRORS_2
    declare -A NET_RX_DROPPED_2 NET_TX_DROPPED_2

    # Store final stats for detected interfaces (re-using the same list)
    for sysfs_name in "${NET_INTERFACES_TO_MONITOR[@]}"; do
        if [ -f "/sys/class/net/$sysfs_name/statistics/rx_bytes" ]; then
            NET_RX_BYTES_2[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/rx_bytes")
            NET_TX_BYTES_2[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/tx_bytes")
            NET_RX_PACKETS_2[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/rx_packets")
            NET_TX_PACKETS_2[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/tx_packets")
            NET_RX_ERRORS_2[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/rx_errors")
            NET_TX_ERRORS_2[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/tx_errors")
            NET_RX_DROPPED_2[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/rx_dropped" 2>/dev/null || echo "0")
            NET_TX_DROPPED_2[$sysfs_name]=$(cat "/sys/class/net/$sysfs_name/statistics/tx_dropped" 2>/dev/null || echo "0")
        fi
    done


    # === General Metrics (don't require sampling within this script run) ===

    # Memory Metrics
    MEMORY_INFO=$(free -b)
    TOTAL_MEM=$(echo "$MEMORY_INFO" | awk 'NR==2{print $2}')
    USED_MEM=$(echo "$MEMORY_INFO" | awk 'NR==2{print $3}')
    FREE_MEM=$(echo "$MEMORY_INFO" | awk 'NR==2{print $4}')
    AVAILABLE_MEM=$(echo "$MEMORY_INFO" | awk 'NR==2{print $7}')
    CACHED_MEM=$(echo "$MEMORY_INFO" | awk 'NR==2{print $6}')
    BUFFER_MEM=$(echo "$MEMORY_INFO" | awk 'NR==2{print $5}')

    output_metric "lxc_memory_total_bytes" "gauge" "$TOTAL_MEM" ""
    output_metric "lxc_memory_used_bytes" "gauge" "$USED_MEM" ""
    output_metric "lxc_memory_free_bytes" "gauge" "$FREE_MEM" ""
    output_metric "lxc_memory_available_bytes" "gauge" "$AVAILABLE_MEM" ""
    output_metric "lxc_memory_cached_bytes" "gauge" "$CACHED_MEM" ""
    output_metric "lxc_memory_buffer_bytes" "gauge" "$BUFFER_MEM" ""

    if [ "$TOTAL_MEM" -gt 0 ]; then
        MEMORY_UTIL=$(echo "scale=2; $USED_MEM * 100 / $TOTAL_MEM" | bc -l)
        output_metric "lxc_memory_utilization_percent" "gauge" "$MEMORY_UTIL" ""
    fi

    # Disk Metrics
    df_output=$(df -h / | tail -n1)
    filesystem=$(echo "$df_output" | awk '{print $1}')
    size_human=$(echo "$df_output" | awk '{print $2}')
    used_human=$(echo "$df_output" | awk '{print $3}')
    avail_human=$(echo "$df_output" | awk '{print $4}')
    use_percent=$(echo "$df_output" | awk '{print $5}' | sed 's/%//')
    mountpoint=$(echo "$df_output" | awk '{print $6}')

    size_bytes=$(convert_to_bytes "$size_human")
    used_bytes=$(convert_to_bytes "$used_human")
    avail_bytes=$(convert_to_bytes "$avail_human")

    output_metric "lxc_disk_total_bytes" "gauge" "$size_bytes" "filesystem=\"$filesystem\",mountpoint=\"$mountpoint\""
    output_metric "lxc_disk_used_bytes" "gauge" "$used_bytes" "filesystem=\"$filesystem\",mountpoint=\"$mountpoint\""
    output_metric "lxc_disk_available_bytes" "gauge" "$avail_bytes" "filesystem=\"$filesystem\",mountpoint=\"$mountpoint\""
    output_metric "lxc_disk_utilization_percent" "gauge" "$use_percent" "filesystem=\"$filesystem\",mountpoint=\"$mountpoint\""

    # CPU Count (not sampled)
    CPU_COUNT=$(nproc)
    output_metric "lxc_cpu_count" "gauge" "$CPU_COUNT" ""

    # System Uptime (not sampled)
    UPTIME_SECONDS=$(cat /proc/uptime | awk '{print $1}')
    output_metric "lxc_uptime_seconds" "gauge" "$UPTIME_SECONDS" ""

    # Process Count (not sampled)
    PROCESS_COUNT=$(ps aux | wc -l)
    output_metric "lxc_process_count" "gauge" "$PROCESS_COUNT" ""


    # === Rate-based Metrics Calculation and Output (using collected initial and final data) ===

    # CPU Utilization
    if [ "$CPU_USAGE_USEC_1" -gt 0 ] && [ "$CPU_USAGE_USEC_2" -ge "$CPU_USAGE_USEC_1" ]; then
        DELTA_CPU_USEC=$((CPU_USAGE_USEC_2 - CPU_USAGE_USEC_1))
        TOTAL_CPU_TIME_FOR_ONE_CORE=$((SAMPLING_INTERVAL_SECONDS * 1000000))

        if [ "$TOTAL_CPU_TIME_FOR_ONE_CORE" -gt 0 ]; then
            CPU_UTIL_CORES_USED=$(echo "scale=2; $DELTA_CPU_USEC / $TOTAL_CPU_TIME_FOR_ONE_CORE" | bc -l)

            if (( $(echo "$CPU_UTIL_CORES_USED < 0" | bc -l) )); then
                CPU_UTIL_CORES_USED="0.00"
            fi

            if [ "$CPU_COUNT" -gt 0 ]; then
                CPU_UTIL_PERCENT_OF_ASSIGNED=$(echo "scale=2; ($CPU_UTIL_CORES_USED / $CPU_COUNT) * 100" | bc -l)
                output_metric "lxc_cpu_utilization_percent" "gauge" "$CPU_UTIL_PERCENT_OF_ASSIGNED" ""
            else
                output_metric "lxc_cpu_utilization_percent" "gauge" "0.00" ""
            fi
        else
            output_metric "lxc_cpu_utilization_percent" "gauge" "0.00" ""
        fi
    else
        output_metric "lxc_cpu_utilization_percent" "gauge" "0.00" ""
    fi

    # Network Bandwidth (Rates) and Total Counters - Now correctly using sysfs name and logical name
    # Iterate over the keys of the NET_RX_BYTES_2 array (which use sysfs names)
    for sysfs_name in "${!NET_RX_BYTES_2[@]}"; do
        # Get the logical name for the metric label (e.g., eth0@if53)
        interface="${NET_IFACE_LOGICAL_NAME_MAP[$sysfs_name]:-$sysfs_name}" # Default to sysfs_name if map is empty

        # Get interface speed and MTU for labels (check if /sys/class/net/$sysfs_name exists)
        speed="unknown"
        if [ -f "/sys/class/net/$sysfs_name/speed" ]; then
            speed=$(cat "/sys/class/net/$sysfs_name/speed" 2>/dev/null || echo "unknown")
        fi
        mtu="unknown"
        if [ -f "/sys/class/net/$sysfs_name/mtu" ]; then
            mtu=$(cat "/sys/class/net/$sysfs_name/mtu" 2>/dev/null || echo "unknown")
        fi

        # Output total network metrics (counters)
        output_metric "lxc_network_rx_bytes_total" "counter" "${NET_RX_BYTES_2[$sysfs_name]}" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        output_metric "lxc_network_tx_bytes_total" "counter" "${NET_TX_BYTES_2[$sysfs_name]}" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        output_metric "lxc_network_rx_packets_total" "counter" "${NET_RX_PACKETS_2[$sysfs_name]}" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        output_metric "lxc_network_tx_packets_total" "counter" "${NET_TX_PACKETS_2[$sysfs_name]}" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        output_metric "lxc_network_rx_errors_total" "counter" "${NET_RX_ERRORS_2[$sysfs_name]}" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        output_metric "lxc_network_tx_errors_total" "counter" "${NET_TX_ERRORS_2[$sysfs_name]}" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        output_metric "lxc_network_rx_dropped_total" "counter" "${NET_RX_DROPPED_2[$sysfs_name]}" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        output_metric "lxc_network_tx_dropped_total" "counter" "${NET_TX_DROPPED_2[$sysfs_name]}" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""

        # Calculate and output network bandwidth (bytes per second)
        if [ -n "${NET_RX_BYTES_1[$sysfs_name]}" ] && [ "${NET_RX_BYTES_2[$sysfs_name]}" -ge "${NET_RX_BYTES_1[$sysfs_name]}" ]; then
            delta_rx_bytes=$(( ${NET_RX_BYTES_2[$sysfs_name]} - ${NET_RX_BYTES_1[$sysfs_name]} ))
            rx_bytes_per_sec=$(echo "scale=2; $delta_rx_bytes / $SAMPLING_INTERVAL_SECONDS" | bc -l)
            output_metric "lxc_network_rx_bytes_per_second" "gauge" "$rx_bytes_per_sec" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        else
            output_metric "lxc_network_rx_bytes_per_second" "gauge" "0.00" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        fi

        if [ -n "${NET_TX_BYTES_1[$sysfs_name]}" ] && [ "${NET_TX_BYTES_2[$sysfs_name]}" -ge "${NET_TX_BYTES_1[$sysfs_name]}" ]; then
            delta_tx_bytes=$(( ${NET_TX_BYTES_2[$sysfs_name]} - ${NET_TX_BYTES_1[$sysfs_name]} ))
            tx_bytes_per_sec=$(echo "scale=2; $delta_tx_bytes / $SAMPLING_INTERVAL_SECONDS" | bc -l)
            output_metric "lxc_network_tx_bytes_per_second" "gauge" "$tx_bytes_per_sec" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        else
            output_metric "lxc_network_tx_bytes_per_second" "gauge" "0.00" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        fi

        if [ -n "${NET_RX_PACKETS_1[$sysfs_name]}" ] && [ "${NET_RX_PACKETS_2[$sysfs_name]}" -ge "${NET_RX_PACKETS_1[$sysfs_name]}" ]; then
            delta_rx_packets=$(( ${NET_RX_PACKETS_2[$sysfs_name]} - ${NET_RX_PACKETS_1[$sysfs_name]} ))
            rx_packets_per_sec=$(echo "scale=2; $delta_rx_packets / $SAMPLING_INTERVAL_SECONDS" | bc -l)
            output_metric "lxc_network_rx_packets_per_second" "gauge" "$rx_packets_per_sec" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        else
            output_metric "lxc_network_rx_packets_per_second" "gauge" "0.00" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        fi

        if [ -n "${NET_TX_PACKETS_1[$sysfs_name]}" ] && [ "${NET_TX_PACKETS_2[$sysfs_name]}" -ge "${NET_TX_PACKETS_1[$sysfs_name]}" ]; then
            delta_tx_packets=$(( ${NET_TX_PACKETS_2[$sysfs_name]} - ${NET_TX_PACKETS_1[$sysfs_name]} ))
            tx_packets_per_sec=$(echo "scale=2; $delta_tx_packets / $SAMPLING_INTERVAL_SECONDS" | bc -l)
            output_metric "lxc_network_tx_packets_per_second" "gauge" "$tx_packets_per_sec" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        else
            output_metric "lxc_network_tx_packets_per_second" "gauge" "0.00" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        fi

        if [ -n "${NET_RX_ERRORS_1[$sysfs_name]}" ] && [ "${NET_RX_ERRORS_2[$sysfs_name]}" -ge "${NET_RX_ERRORS_1[$sysfs_name]}" ]; then
            delta_rx_errors=$(( ${NET_RX_ERRORS_2[$sysfs_name]} - ${NET_RX_ERRORS_1[$sysfs_name]} ))
            rx_errors_per_sec=$(echo "scale=2; $delta_rx_errors / $SAMPLING_INTERVAL_SECONDS" | bc -l)
            output_metric "lxc_network_rx_errors_per_second" "gauge" "$rx_errors_per_sec" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        else
            output_metric "lxc_network_rx_errors_per_second" "gauge" "0.00" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        fi

        if [ -n "${NET_TX_ERRORS_1[$sysfs_name]}" ] && [ "${NET_TX_ERRORS_2[$sysfs_name]}" -ge "${NET_TX_ERRORS_1[$sysfs_name]}" ]; then
            delta_tx_errors=$(( ${NET_TX_ERRORS_2[$sysfs_name]} - ${NET_TX_ERRORS_1[$sysfs_name]} ))
            tx_errors_per_sec=$(echo "scale=2; $delta_tx_errors / $SAMPLING_INTERVAL_SECONDS" | bc -l)
            output_metric "lxc_network_tx_errors_per_second" "gauge" "$tx_errors_per_sec" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        else
            output_metric "lxc_network_tx_errors_per_second" "gauge" "0.00" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        fi

        if [ -n "${NET_RX_DROPPED_1[$sysfs_name]}" ] && [ "${NET_RX_DROPPED_2[$sysfs_name]}" -ge "${NET_RX_DROPPED_1[$sysfs_name]}" ]; then
            delta_rx_dropped=$(( ${NET_RX_DROPPED_2[$sysfs_name]} - ${NET_RX_DROPPED_1[$sysfs_name]} ))
            rx_dropped_per_sec=$(echo "scale=2; $delta_rx_dropped / $SAMPLING_INTERVAL_SECONDS" | bc -l)
            output_metric "lxc_network_rx_dropped_per_second" "gauge" "$rx_dropped_per_sec" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        else
            output_metric "lxc_network_rx_dropped_per_second" "gauge" "0.00" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        fi

        if [ -n "${NET_TX_DROPPED_1[$sysfs_name]}" ] && [ "${NET_TX_DROPPED_2[$sysfs_name]}" -ge "${NET_TX_DROPPED_1[$sysfs_name]}" ]; then
            delta_tx_dropped=$(( ${NET_TX_DROPPED_2[$sysfs_name]} - ${NET_TX_DROPPED_1[$sysfs_name]} ))
            tx_dropped_per_sec=$(echo "scale=2; $delta_tx_dropped / $SAMPLING_INTERVAL_SECONDS" | bc -l)
            output_metric "lxc_network_tx_dropped_per_second" "gauge" "$tx_dropped_per_sec" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        else
            output_metric "lxc_network_tx_dropped_per_second" "gauge" "0.00" "interface=\"$interface\",speed=\"$speed\",mtu=\"$mtu\""
        fi

    done # End of network interface loop


    echo "# End of metrics"

} > "$METRICS_OUTPUT_FILE" # Redirect all standard output of this block to the file

# Ensure the metrics file has correct permissions after writing
chmod 644 "$METRICS_OUTPUT_FILE"
chown otelcol:otelcol "$METRICS_OUTPUT_FILE"
