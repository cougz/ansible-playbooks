receivers:
  # Receiver for general system metrics from the host
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization: {enabled: true}
      disk:
        metrics:
          system.disk.io: {enabled: true}
      filesystem:
        metrics:
          system.filesystem.usage: {enabled: true}
          system.filesystem.utilization: {enabled: true}
      load:
        metrics:
          system.cpu.load_average.1m: {enabled: true}
          system.cpu.load_average.5m: {enabled: true}
          system.cpu.load_average.15m: {enabled: true}
      memory:
        metrics:
          system.memory.usage: {enabled: true}
          system.memory.utilization: {enabled: true}
      network:
        metrics:
          system.network.io: {enabled: true}
          system.network.packets: {enabled: true}
          system.network.errors: {enabled: true}
          system.network.dropped: {enabled: true}
      processes:
        metrics:
          system.processes.count: {enabled: true}

  # Receiver for LXC metrics from universal script
  prometheus:
    config:
      scrape_configs:
        - job_name: 'lxc-script-metrics'
          scrape_interval: 30s
          static_configs:
            - targets: ['localhost:9100']
          metrics_path: /metrics

  # OTLP receiver for applications or other telemetry sources
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"
      http:
        endpoint: "0.0.0.0:4318"

processors:
  # Memory limiter to prevent the collector from using too much memory
  memory_limiter:
    check_interval: 5s
    limit_percentage: 75
    spike_limit_percentage: 20

  # Attributes processor to add custom labels that become Prometheus labels
  attributes:
    actions:
      - key: os_type
        value: "linux"
        action: upsert
      - key: host_name
        value: "{{ ansible_hostname }}"
        action: upsert
      - key: app_name
        value: "lxc-monitoring"
        action: upsert
      - key: lxc_service
        value: "{{ inventory_hostname.split('-')[1] if '-' in inventory_hostname else inventory_hostname }}"
        action: upsert

  # Batch processor to group telemetry data before exporting
  batch:
    timeout: 5s
    send_batch_size: 512

exporters:
  # OTLP exporter to send data to your LGTM stack
  otlp:
    endpoint: "http://your-lgtm-host:4318"  # UPDATE THIS to your actual LGTM endpoint
    tls:
      insecure: true

  # Debug exporter (optional, prints telemetry to collector logs)
  debug:
    verbosity: basic

extensions:
  # Health check extension for monitoring collector status
  health_check:
    endpoint: "127.0.0.1:13133"

service:
  extensions: [health_check]
  pipelines:
    metrics:
      receivers: [hostmetrics, prometheus, otlp]
      processors: [memory_limiter, attributes, batch]  # attributes processor adds labels that become Prometheus labels
      exporters: [otlp, debug]
    traces:
      receivers: [otlp]
      processors: [attributes, batch]
      exporters: [otlp]
    logs:
      receivers: [otlp]
      processors: [attributes, batch]
      exporters: [otlp]

  # Collector's own telemetry settings
  telemetry:
    logs:
      level: info
    metrics:
      level: basic
      address: "127.0.0.1:8888"
