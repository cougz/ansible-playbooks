# templates/otel-config.yaml.j2
receivers:
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
          system.cpu.time:
            enabled: true
      disk:
        metrics:
          system.disk.io:
            enabled: true
          system.disk.io_time:
            enabled: true
          system.disk.operation_time:
            enabled: true
      filesystem:
        metrics:
          system.filesystem.usage:
            enabled: true
          system.filesystem.utilization:
            enabled: true
      load:
        metrics:
          system.cpu.load_average.1m:
            enabled: true
          system.cpu.load_average.5m:
            enabled: true
          system.cpu.load_average.15m:
            enabled: true
      memory:
        metrics:
          system.memory.usage:
            enabled: true
          system.memory.utilization:
            enabled: true
      network:
        metrics:
          system.network.io:
            enabled: true
          system.network.packets:
            enabled: true
          system.network.errors:
            enabled: true
          system.network.dropped:
            enabled: true
          system.network.connections:
            enabled: true
      paging:
        metrics:
          system.paging.usage:
            enabled: true
          system.paging.operations:
            enabled: true
      processes:
        metrics:
          system.processes.count:
            enabled: true
          system.processes.created:
            enabled: true

  # Keep OTLP receiver for application telemetry
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  batch:
    timeout: 10s
    send_batch_size: 1024
  
  # Add memory_limiter as a processor, not an extension
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 25
  
  # Use host.name as our key identifier for container-specific metrics
  resource:
    attributes:
      - key: service.name
        value: "lxc-{{ ansible_hostname }}"
        action: upsert
      - key: service.instance.id
        value: "{{ ansible_hostname }}"
        action: upsert
      - key: host.name
        value: "{{ ansible_hostname }}"
        action: upsert
      - key: os.type
        value: "linux"
        action: upsert
      # Add explicit container-level information
      - key: container.id
        value: "{{ ansible_hostname }}"
        action: upsert
      - key: container.name
        value: "{{ ansible_hostname }}"
        action: upsert
      - key: container.type
        value: "lxc"
        action: upsert
      # Add total memory information from ansible facts
      - key: container.memory.total_bytes
        value: "{{ ansible_memtotal_mb * 1024 * 1024 }}"
        action: upsert

exporters:
  otlp:
    endpoint: "{{ otel_endpoint }}"
    {% if otel_headers != "" and otel_headers is defined -%}
    headers:
      {% for header in otel_headers.split(',') -%}
      {% set key_value = header.split('=') -%}
      {% if key_value | length == 2 -%}
      {{ key_value[0].strip() }}: "{{ key_value[1].strip() }}"
      {% endif -%}
      {% endfor -%}
    {% endif -%}
    tls:
      insecure: true
  
  debug:
    verbosity: basic

extensions:
  health_check:
    endpoint: 127.0.0.1:13133

service:
  extensions: [health_check]  # Only include health_check, not memory_limiter
  
  pipelines:
    # Single metrics pipeline with container-specific attributes
    metrics:
      receivers: [hostmetrics, otlp]
      processors: [memory_limiter, resource, batch]  # Include memory_limiter as a processor
      exporters: [otlp, debug]
    
    # Application telemetry pipelines
    traces:
      receivers: [otlp]
      processors: [resource, batch]
      exporters: [otlp]
    
    logs:
      receivers: [otlp]
      processors: [resource, batch]
      exporters: [otlp]
  
  telemetry:
    logs:
      level: info
      output_paths: ["{{ otel_log_dir }}/otelcol.log"]
    metrics:
      level: basic
      address: "127.0.0.1:8888"  # Use loopback address instead of 0.0.0.0
