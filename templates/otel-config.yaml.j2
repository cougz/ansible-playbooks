# templates/otel-config.yaml.j2
receivers:
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
          system.cpu.time:
            enabled: true
      disk:
        metrics:
          system.disk.io:
            enabled: true
          system.disk.io_time:
            enabled: true
          system.disk.operation_time:
            enabled: true
      filesystem:
        metrics:
          system.filesystem.usage:
            enabled: true
          system.filesystem.utilization:
            enabled: true
      load:
        metrics:
          system.cpu.load_average.1m:
            enabled: true
          system.cpu.load_average.5m:
            enabled: true
          system.cpu.load_average.15m:
            enabled: true
      memory:
        metrics:
          system.memory.usage:
            enabled: true
          system.memory.utilization:
            enabled: true
      network:
        metrics:
          system.network.io:
            enabled: true
          system.network.packets:
            enabled: true
          system.network.errors:
            enabled: true
          system.network.dropped:
            enabled: true
          system.network.connections:
            enabled: true
      paging:
        metrics:
          system.paging.usage:
            enabled: true
          system.paging.operations:
            enabled: true
      processes:
        metrics:
          system.processes.count:
            enabled: true
          system.processes.created:
            enabled: true
  
  # Keep OTLP receiver for application telemetry
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  batch:
    timeout: 10s
    send_batch_size: 1024
  
  resourcedetection:
    detectors: [env, system]
    timeout: 5s
    override: true  # Important - ensure system-level attributes don't override our container ones
  
  # Custom memory metrics processor
  resource:
    attributes:
      # Set container-specific attributes
      - key: service.name
        value: "lxc-{{ ansible_hostname }}"
        action: upsert
      - key: service.instance.id
        value: "{{ ansible_hostname }}"
        action: upsert
      - key: host.name
        value: "{{ ansible_hostname }}"
        action: upsert
      - key: container.name
        value: "{{ ansible_hostname }}"
        action: upsert
      - key: container.type
        value: "lxc"
        action: upsert
      - key: os.type
        value: "linux"
        action: upsert
      - key: deployment.environment
        value: "production"
        action: upsert
      # Add memory totals from what we can observe (host perspective)
      - key: container.memory.total_mb
        value: "{{ ansible_memtotal_mb }}"
        action: upsert
      - key: container.id
        value: "{{ ansible_hostname }}"
        action: upsert

  # Metrics transformation to make memory metrics per-container
  metricstransform:
    transforms:
      - include: system.memory.usage
        action: update
        operations:
          - action: add_label
            new_label: container.id
            new_value: "{{ ansible_hostname }}"

exporters:
  otlp:
    endpoint: "{{ otel_endpoint }}"
    {% if otel_headers != "" and otel_headers is defined -%}
    headers:
      {% for header in otel_headers.split(',') -%}
      {% set key_value = header.split('=') -%}
      {% if key_value | length == 2 -%}
      {{ key_value[0].strip() }}: "{{ key_value[1].strip() }}"
      {% endif -%}
      {% endfor -%}
    {% endif -%}
    tls:
      insecure: true
  
  debug:
    verbosity: basic

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 25

service:
  extensions: [health_check, memory_limiter]
  
  pipelines:
    # Host metrics pipeline
    metrics/host:
      receivers: [hostmetrics]
      processors: [resourcedetection, resource, metricstransform, batch]
      exporters: [otlp, debug]
    
    # Application telemetry pipeline
    metrics/app:
      receivers: [otlp]
      processors: [resource, batch]
      exporters: [otlp]
    
    traces:
      receivers: [otlp]
      processors: [resource, batch]
      exporters: [otlp]
    
    logs:
      receivers: [otlp]
      processors: [resource, batch]
      exporters: [otlp]
  
  telemetry:
    logs:
      level: info
      output_paths: ["{{ otel_log_dir }}/otelcol.log"]
    metrics:
      level: basic
      address: 0.0.0.0:8888
